# -*- coding: utf-8 -*-
"""alphaBeta.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hpyaHxDZFzm6jta54wkJsk-ei1hPZNuB
"""

MAX, MIN = 1000, -1000

def minimax(depth, nodeIndex, maximizing, values, alpha, beta):
  
  #if leaf node
  if depth == 3:
    return values[nodeIndex]
  
  if maximizing:
    best = MIN
    
    for i in range(0, 2):
      val = minimax(depth+1, nodeIndex*2 + i, False, values, alpha, beta)
      best = max(best, val)
      alpha = max(alpha, best)
      
      if beta <= alpha:
        break
      print("Alpha: ", best)
    return best
  
  else:
    best = MAX
    
    for i in range(0, 2):
      val = minimax(depth+1, nodeIndex*2 + i, True, values, alpha, beta)
      best = min(best, val)
      beta = min(beta, best)
      
      if beta <= alpha:
        break
      print("Beta: ", best)
    return best    
    
#values = [3,5,6,9,1,2,0,-1] #answer = 5 gfg
values = [6,7,9,1,2,3,4,5,1]  #answer = 3 javatpoint
#values = [5,6,7,4,5,3,6,6,9,7,5,9,8,6] #answer = 6 wikipedia
print("The optimal value is : ", minimax(0,0,True,values,MIN,MAX))

